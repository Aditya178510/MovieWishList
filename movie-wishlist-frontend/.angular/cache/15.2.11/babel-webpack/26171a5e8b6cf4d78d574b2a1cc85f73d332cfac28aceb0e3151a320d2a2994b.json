{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MovieService = /*#__PURE__*/(() => {\n  class MovieService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiUrl}/api/movies`;\n    }\n    // Error handling method\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      console.error(errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    // Get a single movie by ID\n    getMovie(id) {\n      return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n    }\n    // Add a new movie\n    addMovie(movie) {\n      const requestBody = {\n        title: movie.title,\n        genre: movie.genre,\n        releaseYear: movie.releaseYear,\n        runtime: movie.runtime,\n        posterUrl: movie.posterUrl,\n        rating: movie.rating,\n        review: movie.review\n      };\n      return this.http.post(this.apiUrl, requestBody).pipe(catchError(this.handleError));\n    }\n    // Update an existing movie (metadata)\n    updateMovie(id, movie) {\n      const requestBody = {\n        title: movie.title,\n        genre: movie.genre,\n        releaseYear: movie.releaseYear,\n        runtime: movie.runtime,\n        posterUrl: movie.posterUrl,\n        rating: movie.rating,\n        review: movie.review\n      };\n      return this.http.put(`${this.apiUrl}/${id}`, requestBody).pipe(catchError(this.handleError));\n    }\n    // Mark a movie as watched\n    markAsWatched(id, rating, review) {\n      const params = [];\n      if (typeof rating === 'number') params.push(`rating=${rating}`);\n      if (typeof review === 'string' && review.length > 0) params.push(`review=${encodeURIComponent(review)}`);\n      const qs = params.length ? `?${params.join('&')}` : '';\n      return this.http.put(`${this.apiUrl}/${id}/mark-watched${qs}`, {}).pipe(catchError(this.handleError));\n    }\n    // Delete a movie\n    deleteMovie(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n    }\n    // Get movies for wishlist\n    getWishlist() {\n      return this.http.get(`${this.apiUrl}/wishlist`).pipe(catchError(this.handleError));\n    }\n    // Get watched movies\n    getWatched() {\n      return this.http.get(`${this.apiUrl}/watched`).pipe(catchError(this.handleError));\n    }\n    // Search for movies from external API\n    searchMovies(query) {\n      return this.http.get(`${environment.apiUrl}/api/tmdb/search?query=${encodeURIComponent(query)}`).pipe(catchError(this.handleError));\n    }\n    // Get popular movies from external API (simpler than trending)\n    getTrending() {\n      return this.http.get(`${environment.apiUrl}/api/tmdb/popular`).pipe(catchError(this.handleError));\n    }\n    // Like a movie\n    likeMovie(id) {\n      return this.http.post(`${environment.apiUrl}/api/social/movies/${id}/like`, {}).pipe(catchError(this.handleError));\n    }\n    // Unlike a movie\n    unlikeMovie(id) {\n      return this.http.delete(`${environment.apiUrl}/api/social/movies/${id}/unlike`).pipe(catchError(this.handleError));\n    }\n    // Add a comment to a movie\n    addComment(id, content) {\n      return this.http.post(`${environment.apiUrl}/api/social/movies/${id}/comments`, {\n        content\n      }).pipe(catchError(this.handleError));\n    }\n    // Get comments for a movie\n    getComments(id) {\n      return this.http.get(`${environment.apiUrl}/api/social/movies/${id}/comments`).pipe(catchError(this.handleError));\n    }\n    static {\n      this.ɵfac = function MovieService_Factory(t) {\n        return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: MovieService,\n        factory: MovieService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MovieService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}