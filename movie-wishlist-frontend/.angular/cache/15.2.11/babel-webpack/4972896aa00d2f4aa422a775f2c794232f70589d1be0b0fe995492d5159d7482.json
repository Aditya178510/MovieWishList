{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MovieService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/api/movies`;\n  }\n  // Error handling method\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  // Get a single movie by ID\n  getMovie(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  // Add a new movie\n  addMovie(movie) {\n    const requestBody = {\n      title: movie.title,\n      genre: movie.genre,\n      releaseYear: movie.releaseYear,\n      runtime: movie.runtime,\n      posterUrl: movie.posterUrl,\n      rating: movie.rating,\n      review: movie.review\n    };\n    return this.http.post(this.apiUrl, requestBody).pipe(catchError(this.handleError));\n  }\n  // Update an existing movie (metadata)\n  updateMovie(id, movie) {\n    const requestBody = {\n      title: movie.title,\n      genre: movie.genre,\n      releaseYear: movie.releaseYear,\n      runtime: movie.runtime,\n      posterUrl: movie.posterUrl,\n      rating: movie.rating,\n      review: movie.review\n    };\n    return this.http.put(`${this.apiUrl}/${id}`, requestBody).pipe(catchError(this.handleError));\n  }\n  // Mark a movie as watched\n  markAsWatched(id, rating, review) {\n    const params = [];\n    if (typeof rating === 'number') params.push(`rating=${rating}`);\n    if (typeof review === 'string' && review.length > 0) params.push(`review=${encodeURIComponent(review)}`);\n    const qs = params.length ? `?${params.join('&')}` : '';\n    return this.http.put(`${this.apiUrl}/${id}/mark-watched${qs}`, {}).pipe(catchError(this.handleError));\n  }\n  // Delete a movie\n  deleteMovie(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n  }\n  // Get movies for wishlist\n  getWishlist() {\n    return this.http.get(`${this.apiUrl}/wishlist`).pipe(catchError(this.handleError));\n  }\n  // Get watched movies\n  getWatched() {\n    return this.http.get(`${this.apiUrl}/watched`).pipe(catchError(this.handleError));\n  }\n  // Search for movies from external API\n  searchMovies(query) {\n    return this.http.get(`${environment.apiUrl}/api/tmdb/search?query=${encodeURIComponent(query)}`).pipe(catchError(this.handleError));\n  }\n  // Get trending movies (day by default, can support 'week' by passing window)\n  getTrending(window = 'day', page) {\n    const qs = page ? `?window=${window}&page=${page}` : `?window=${window}`;\n    return this.http.get(`${environment.apiUrl}/api/tmdb/trending${qs}`).pipe(catchError(this.handleError));\n  }\n  // Like a movie\n  likeMovie(id) {\n    return this.http.post(`${environment.apiUrl}/api/social/movies/${id}/like`, {}).pipe(catchError(this.handleError));\n  }\n  // Unlike a movie\n  unlikeMovie(id) {\n    return this.http.delete(`${environment.apiUrl}/api/social/movies/${id}/unlike`).pipe(catchError(this.handleError));\n  }\n  // Add a comment to a movie\n  addComment(id, content) {\n    return this.http.post(`${environment.apiUrl}/api/social/movies/${id}/comments`, {\n      content\n    }).pipe(catchError(this.handleError));\n  }\n  // Get comments for a movie\n  getComments(id) {\n    return this.http.get(`${environment.apiUrl}/api/social/movies/${id}/comments`).pipe(catchError(this.handleError));\n  }\n  static {\n    this.ɵfac = function MovieService_Factory(t) {\n      return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MovieService,\n      factory: MovieService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["throwError","catchError","environment","MovieService","constructor","http","apiUrl","handleError","error","errorMessage","ErrorEvent","message","status","console","Error","getMovie","id","get","pipe","addMovie","movie","requestBody","title","genre","releaseYear","runtime","posterUrl","rating","review","post","updateMovie","put","markAsWatched","params","push","length","encodeURIComponent","qs","join","deleteMovie","delete","getWishlist","getWatched","searchMovies","query","getTrending","window","page","likeMovie","unlikeMovie","addComment","content","getComments","factory","providedIn"],"sourceRoot":"","sources":["D:\\MovieListIO\\movie-wishlist-frontend\\src\\app\\core\\services\\movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { Movie } from '../models/movie.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MovieService {\r\n  private apiUrl = `${environment.apiUrl}/api/movies`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Error handling method\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  // Get a single movie by ID\r\n  getMovie(id: number): Observable<Movie> {\r\n    return this.http.get<Movie>(`${this.apiUrl}/${id}`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Add a new movie\r\n  addMovie(movie: Movie): Observable<Movie> {\r\n    const requestBody = {\r\n      title: movie.title,\r\n      genre: movie.genre,\r\n      releaseYear: movie.releaseYear,\r\n      runtime: movie.runtime,\r\n      posterUrl: movie.posterUrl,\r\n      rating: movie.rating,\r\n      review: movie.review\r\n    };\r\n    return this.http.post<Movie>(this.apiUrl, requestBody).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Update an existing movie (metadata)\r\n  updateMovie(id: number, movie: Movie): Observable<Movie> {\r\n    const requestBody = {\r\n      title: movie.title,\r\n      genre: movie.genre,\r\n      releaseYear: movie.releaseYear,\r\n      runtime: movie.runtime,\r\n      posterUrl: movie.posterUrl,\r\n      rating: movie.rating,\r\n      review: movie.review\r\n    };\r\n    return this.http.put<Movie>(`${this.apiUrl}/${id}`, requestBody).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Mark a movie as watched\r\n  markAsWatched(id: number, rating?: number, review?: string): Observable<Movie> {\r\n    const params: string[] = [];\r\n    if (typeof rating === 'number') params.push(`rating=${rating}`);\r\n    if (typeof review === 'string' && review.length > 0) params.push(`review=${encodeURIComponent(review)}`);\r\n    const qs = params.length ? `?${params.join('&')}` : '';\r\n    return this.http.put<Movie>(`${this.apiUrl}/${id}/mark-watched${qs}`, {}).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Delete a movie\r\n  deleteMovie(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Get movies for wishlist\r\n  getWishlist(): Observable<Movie[]> {\r\n    return this.http.get<Movie[]>(`${this.apiUrl}/wishlist`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Get watched movies\r\n  getWatched(): Observable<Movie[]> {\r\n    return this.http.get<Movie[]>(`${this.apiUrl}/watched`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Search for movies from external API\r\n  searchMovies(query: string): Observable<any> {\r\n    return this.http.get<any>(`${environment.apiUrl}/api/tmdb/search?query=${encodeURIComponent(query)}`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Get trending movies (day by default, can support 'week' by passing window)\r\n  getTrending(window: 'day' | 'week' = 'day', page?: number): Observable<any> {\r\n    const qs = page ? `?window=${window}&page=${page}` : `?window=${window}`;\r\n    return this.http.get<any>(`${environment.apiUrl}/api/tmdb/trending${qs}`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Like a movie\r\n  likeMovie(id: number): Observable<void> {\r\n    return this.http.post<void>(`${environment.apiUrl}/api/social/movies/${id}/like`, {}).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Unlike a movie\r\n  unlikeMovie(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${environment.apiUrl}/api/social/movies/${id}/unlike`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Add a comment to a movie\r\n  addComment(id: number, content: string): Observable<any> {\r\n    return this.http.post<any>(`${environment.apiUrl}/api/social/movies/${id}/comments`, { content }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Get comments for a movie\r\n  getComments(id: number): Observable<any[]> {\r\n    return this.http.get<any[]>(`${environment.apiUrl}/api/social/movies/${id}/comments`).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}