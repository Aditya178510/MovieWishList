{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  // Authentication removed; keep a simple current user placeholder\n  constructor(http) {\n    this.http = http;\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    // No auth; create a simple guest user and store it\n    const user = {\n      id: 0,\n      username: 'guest',\n      email: 'guest@example.com'\n    };\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    this.currentUserSubject.next(user);\n    return new BehaviorSubject(user).asObservable();\n  }\n  register(username, email, password) {\n    return this.http.post(`${environment.apiUrl}/api/auth/signup`, {\n      username,\n      email,\n      password\n    }).pipe(catchError(error => {\n      return throwError(() => error);\n    }));\n  }\n  logout() {\n    // Remove user from local storage and set current user to null\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  isLoggedIn() {\n    // Always true in simplified mode\n    return true;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,QAAQ,MAAM;AAC9D,SAASC,UAAU,QAAa,gBAAgB;AAChD,SAASC,WAAW,QAAQ,mCAAmC;;;AAM/D,OAAM,MAAOC,WAAW;EAGtB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAI,CAACC,kBAAkB,GAAG,IAAIV,eAAe,CAAcO,UAAU,GAAGI,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,GAAG,IAAI,CAAC;IACtG,IAAI,CAACM,WAAW,GAAG,IAAI,CAACH,kBAAkB,CAACI,YAAY,EAAE;EAC3D;EAEA,IAAWC,gBAAgB;IACzB,OAAO,IAAI,CAACL,kBAAkB,CAACM,KAAK;EACtC;EAEAC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,MAAMC,IAAI,GAAS;MAAEC,EAAE,EAAE,CAAC;MAAEH,QAAQ,EAAE,OAAO;MAAEI,KAAK,EAAE;IAAmB,CAAE;IAC3Ed,YAAY,CAACe,OAAO,CAAC,aAAa,EAAEZ,IAAI,CAACa,SAAS,CAACJ,IAAI,CAAC,CAAC;IACzD,IAAI,CAACV,kBAAkB,CAACe,IAAI,CAACL,IAAI,CAAC;IAClC,OAAO,IAAIpB,eAAe,CAAOoB,IAAI,CAAC,CAACN,YAAY,EAAE;EACvD;EAEAY,QAAQ,CAACR,QAAgB,EAAEI,KAAa,EAAEH,QAAgB;IACxD,OAAO,IAAI,CAACb,IAAI,CAACqB,IAAI,CAAC,GAAGxB,WAAW,CAACyB,MAAM,kBAAkB,EAAE;MAAEV,QAAQ;MAAEI,KAAK;MAAEH;IAAQ,CAAE,CAAC,CAC1FU,IAAI,CACH3B,UAAU,CAAC4B,KAAK,IAAG;MACjB,OAAO7B,UAAU,CAAC,MAAM6B,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACL;EAEAC,MAAM;IACJ;IACAvB,YAAY,CAACwB,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACtB,kBAAkB,CAACe,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAQ,UAAU;IACR;IACA,OAAO,IAAI;EACb;;;uBAzCW7B,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA8B,SAAX9B,WAAW;MAAA+B,YAFV;IAAM;EAAA","names":["BehaviorSubject","throwError","catchError","environment","AuthService","constructor","http","storedUser","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","login","username","password","user","id","email","setItem","stringify","next","register","post","apiUrl","pipe","error","logout","removeItem","isLoggedIn","factory","providedIn"],"sourceRoot":"","sources":["D:\\MovieListIO\\movie-wishlist-frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { environment } from '../../../environments/environment';\r\nimport { User } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject: BehaviorSubject<User | null>;\r\n  public currentUser: Observable<User | null>;\r\n  // Authentication removed; keep a simple current user placeholder\r\n\r\n  constructor(private http: HttpClient) {\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    this.currentUserSubject = new BehaviorSubject<User | null>(storedUser ? JSON.parse(storedUser) : null);\r\n    this.currentUser = this.currentUserSubject.asObservable();\r\n  }\r\n\r\n  public get currentUserValue(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(username: string, password: string): Observable<User> {\r\n    // No auth; create a simple guest user and store it\r\n    const user: User = { id: 0, username: 'guest', email: 'guest@example.com' };\r\n    localStorage.setItem('currentUser', JSON.stringify(user));\r\n    this.currentUserSubject.next(user);\r\n    return new BehaviorSubject<User>(user).asObservable();\r\n  }\r\n\r\n  register(username: string, email: string, password: string): Observable<any> {\r\n    return this.http.post(`${environment.apiUrl}/api/auth/signup`, { username, email, password })\r\n      .pipe(\r\n        catchError(error => {\r\n          return throwError(() => error);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    // Remove user from local storage and set current user to null\r\n    localStorage.removeItem('currentUser');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    // Always true in simplified mode\r\n    return true;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}