{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    // Authentication removed; keep a simple current user placeholder\n    constructor(http) {\n      this.http = http;\n      const storedUser = localStorage.getItem('currentUser');\n      this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    login(username, password) {\n      // No auth; create a simple guest user and store it\n      const user = {\n        id: 0,\n        username: 'guest',\n        email: 'guest@example.com'\n      };\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      return new BehaviorSubject(user).asObservable();\n    }\n    register(username, email, password) {\n      return this.http.post(`${environment.apiUrl}/api/auth/signup`, {\n        username,\n        email,\n        password\n      }).pipe(catchError(error => {\n        return throwError(() => error);\n      }));\n    }\n    logout() {\n      // Remove user from local storage and set current user to null\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next(null);\n    }\n    isLoggedIn() {\n      // Always true in simplified mode\n      return true;\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}